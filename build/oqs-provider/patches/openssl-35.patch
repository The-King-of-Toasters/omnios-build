From c8dd6044e36fee6bfac95df8660e189e6687fe45 Mon Sep 17 00:00:00 2001
From: Michael Baentsch <57787676+baentsch@users.noreply.github.com>
Date: Wed, 19 Feb 2025 09:19:12 +0100
Subject: [PATCH 1/8] enable run-time disablement for erroring algs in 3.5

Signed-off-by: Michael Baentsch <57787676+baentsch@users.noreply.github.com>
diff -wpruN --no-dereference '--exclude=*.orig' a~/.github/workflows/linux.yml a/.github/workflows/linux.yml
--- a~/.github/workflows/linux.yml	1970-01-01 00:00:00
+++ a/.github/workflows/linux.yml	1970-01-01 00:00:00
@@ -58,6 +58,8 @@ jobs:
     steps:
       - name: Checkout code
         uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
+      - name: Add safe directory exception
+        run: git config --global --add safe.directory /__w/oqs-provider/oqs-provider
       - name: Full build
         run: OPENSSL_BRANCH=${{ matrix.ossl-branch }} LIBOQS_BRANCH=0.12.0 OQS_LIBJADE_BUILD=${{ matrix.libjade-build }} ./scripts/fullbuild.sh
       - name: Enable sibling oqsprovider for testing
@@ -79,9 +81,9 @@ jobs:
         run: cpack -C DebPack
         working-directory: _build
       - name: Retain .deb installer
-        uses: actions/upload-artifact@v3
+        uses: actions/upload-artifact@v4
         with:
-          name: oqsprovider-x64
+          name: ${{ matrix.ossl-branch }} ${{ matrix.cmake-params }} ${{ matrix.libjade-build }} oqsprovider-x64
           path: _build/*.deb
       - name: Verify that the static library is copied to the install directory.
         run: |
@@ -250,7 +252,7 @@ jobs:
             dpkg -I oqs-provider-*.deb | grep -q "Architecture: arm64"
 
       - name: Retain .deb installer
-        uses: actions/upload-artifact@v3
+        uses: actions/upload-artifact@v4
         with:
           name: oqsprovider-aarch64
           path: build/*.deb
diff -wpruN --no-dereference '--exclude=*.orig' a~/.github/workflows/macos.yml a/.github/workflows/macos.yml
--- a~/.github/workflows/macos.yml	1970-01-01 00:00:00
+++ a/.github/workflows/macos.yml	1970-01-01 00:00:00
@@ -43,7 +43,7 @@ jobs:
           path: liboqs
       - name: Retrieve OpenSSL32 from cache
         id: cache-openssl32
-        uses: actions/cache@v3
+        uses: actions/cache@v4
         with:
           path: .localopenssl32
           key: ${{ runner.os }}-openssl32
@@ -84,7 +84,7 @@ jobs:
             fi'
         working-directory: scripts
       - name: Retain oqsprovider.dylib
-        uses: actions/upload-artifact@v3
+        uses: actions/upload-artifact@v4
         with:
           name: oqs-provider-${{matrix.os}}-x64
           path: _build/lib/oqsprovider.dylib
diff -wpruN --no-dereference '--exclude=*.orig' a~/.github/workflows/windows.yml a/.github/workflows/windows.yml
--- a~/.github/workflows/windows.yml	1970-01-01 00:00:00
+++ a/.github/workflows/windows.yml	1970-01-01 00:00:00
@@ -52,7 +52,7 @@ jobs:
           packages: perl git ninja gcc-core cmake make python3 python3-devel python3-setuptools python3-exceptiongroup
       - name: Retrieve OpenSSL32 from cache
         id: cache-openssl32
-        uses: actions/cache@v3
+        uses: actions/cache@v4
         with:
           path: c:\cygwin\opt\openssl32
           key: ${{ runner.os }}-cygwinopenssl32
@@ -98,9 +98,9 @@ jobs:
         run: bash -c "echo $PATH && PATH=/opt/openssl32/bin:/usr/bin ctest -V"
         working-directory: _build
       - name: Retain oqsprovider.dll
-        uses: actions/upload-artifact@v3
+        uses: actions/upload-artifact@v4
         with:
-          name: oqs-provider-cygwin
+          name: ${{matrix.os}} ${{matrix.platform.arch}} oqs-provider-cygwin
           path: D:/a/oqs-provider/oqs-provider/_build/bin/oqsprovider.dll
 
   msvc:
@@ -123,7 +123,7 @@ jobs:
     steps:
       - name: Restore OpenSSL32 cache
         id: cache-openssl32
-        uses: actions/cache@v3
+        uses: actions/cache@v4
         with:
           path: c:\openssl32
           key: ${{ runner.os }}-msvcopenssl32
@@ -209,9 +209,9 @@ jobs:
         run: |
           ctest -V --test-dir _build
       - name: Retain oqsprovider.dll
-        uses: actions/upload-artifact@v3
+        uses: actions/upload-artifact@v4
         with:
-          name: oqs-provider-msvc
+          name: ${{matrix.os}} ${{matrix.platform.arch}} oqs-provider-msvc
           path: D:/a/oqs-provider/oqs-provider/_build/lib/oqsprovider.dll
 
   msvc_native:
@@ -237,7 +237,7 @@ jobs:
     steps:
         - name: Restore native OpenSSL32 cache
           id: cache-openssl32n
-          uses: actions/cache@v3
+          uses: actions/cache@v4
           with:
             path: c:\openssl32n
             key: ${{ runner.os }}-msvcopenssl32n
@@ -315,8 +315,8 @@ jobs:
           run: |
             ctest --test-dir _build -C ${{ matrix.type }}
         - name: Retain oqsprovider.dll
-          uses: actions/upload-artifact@v3
+          uses: actions/upload-artifact@v4
           with:
-            name: oqs-provider-msvc
+            name: ${{matrix.os}} ${{matrix.platform.arch}} oqs-provider-msvc
             path: D:/a/oqs-provider/oqs-provider/_build/lib/oqsprovider.dll
 
diff -wpruN --no-dereference '--exclude=*.orig' a~/README.md a/README.md
--- a~/README.md	1970-01-01 00:00:00
+++ a/README.md	1970-01-01 00:00:00
@@ -57,9 +57,10 @@ This implementation makes available the
 <!--- OQS_TEMPLATE_FRAGMENT_ALGS_END -->
 
 As the underlying [liboqs](https://github.com/open-quantum-safe/liboqs)
-at build time may be configured to not enable all algorithms, it is
-advisable to check the possible subset of algorithms actually enabled
-via the standard commands, i.e.,
+at build time may be configured to not enable all algorithms, and the
+underlying `openssl` installation at runtime may deliver some algorithms
+already it is advisable to check the possible subset of algorithms actually
+enabled via the standard commands, i.e.,
 `openssl list -signature-algorithms -provider oqsprovider` and
 `openssl list -kem-algorithms -provider oqsprovider`.
 
@@ -158,6 +159,21 @@ Also new in this version is the possibil
 active TLS signature algorithms via a new `openssl list` option:
 `openssl list -tls-signature-algorithms`.
 
+## 3.5 and greater
+
+These versions include support for the standard PQC algorithms ML-KEM, ML-DSA
+and SLH-DSA. Accordingly, `oqsprovider` can no longer succeed registering
+(O)IDs for these algorithms as these already exist. In addition, `oqsprovider`
+functionally (e.g., support for several key formats) and non-functionally
+(e.g., code quality) is not at par with the implementations for these
+algorithms. Therefore, these, as well as their composite and hybrid variants
+are disabled at runtime upon detection of these being available in `openssl`.
+The same algorithms will continue to work even using the same `oqsprovider`
+binary in OpenSSL installations with a version older than 3.5.
+
+This limitation might be resolved by implementing https://github.com/open-quantum-safe/oqs-provider/discussions/625.
+given sufficient interest. Contributions very welcome.
+
 ## All versions
 
 A limitation present in older OpenSSL versions is the number of default groups
diff -wpruN --no-dereference '--exclude=*.orig' a~/oqsprov/oqs_prov.h a/oqsprov/oqs_prov.h
--- a~/oqsprov/oqs_prov.h	1970-01-01 00:00:00
+++ a/oqsprov/oqs_prov.h	1970-01-01 00:00:00
@@ -57,6 +57,8 @@
 #define OQS_HYBRID_PKEY_PARAM_PQ_PUB_KEY "hybrid_pq_" OSSL_PKEY_PARAM_PUB_KEY
 #define OQS_HYBRID_PKEY_PARAM_PQ_PRIV_KEY "hybrid_pq_" OSSL_PKEY_PARAM_PRIV_KEY
 
+STACK_OF(OPENSSL_STRING) * oqsprov_get_rt_disabled_algs();
+
 /* Extras for OQS extension */
 
 // clang-format off
diff -wpruN --no-dereference '--exclude=*.orig' a~/oqsprov/oqsprov.c a/oqsprov/oqsprov.c
--- a~/oqsprov/oqsprov.c	1970-01-01 00:00:00
+++ a/oqsprov/oqsprov.c	1970-01-01 00:00:00
@@ -36,6 +36,11 @@
     printf(a, b, c)
 #endif // NDEBUG
 
+static STACK_OF(OPENSSL_STRING) *rt_disabled_algs = NULL;
+STACK_OF(OPENSSL_STRING) * oqsprov_get_rt_disabled_algs() {
+    return rt_disabled_algs;
+}
+
 /*
  * Forward declarations to ensure that interface functions are correctly
  * defined.
@@ -575,6 +580,8 @@ static const OSSL_PARAM oqsprovider_para
     OSSL_PARAM_DEFN(OSSL_PROV_PARAM_STATUS, OSSL_PARAM_INTEGER, NULL, 0),
     OSSL_PARAM_END};
 
+static OSSL_ALGORITHM *oqsprovider_signatures_rt = NULL;
+
 static const OSSL_ALGORITHM oqsprovider_signatures[] = {
 ///// OQS_TEMPLATE_FRAGMENT_SIG_FUNCTIONS_START
 #ifdef OQS_ENABLE_SIG_dilithium_2
@@ -675,6 +682,7 @@ static const OSSL_ALGORITHM oqsprovider_
     ///// OQS_TEMPLATE_FRAGMENT_SIG_FUNCTIONS_END
     {NULL, NULL, NULL}};
 
+static OSSL_ALGORITHM *oqsprovider_asym_kems_rt = NULL;
 static const OSSL_ALGORITHM oqsprovider_asym_kems[] = {
 ///// OQS_TEMPLATE_FRAGMENT_KEM_FUNCTIONS_START
 // clang-format off
@@ -771,6 +779,7 @@ static const OSSL_ALGORITHM oqsprovider_
     ///// OQS_TEMPLATE_FRAGMENT_KEM_FUNCTIONS_END
     {NULL, NULL, NULL}};
 
+static OSSL_ALGORITHM *oqsprovider_keymgmt_rt = NULL;
 static const OSSL_ALGORITHM oqsprovider_keymgmt[] = {
 ///// OQS_TEMPLATE_FRAGMENT_KEYMGMT_FUNCTIONS_START
 // clang-format off
@@ -982,6 +991,7 @@ static const OSSL_ALGORITHM oqsprovider_
     ///// OQS_TEMPLATE_FRAGMENT_KEYMGMT_FUNCTIONS_END
     {NULL, NULL, NULL}};
 
+static OSSL_ALGORITHM *oqsprovider_encoder_rt = NULL;
 static const OSSL_ALGORITHM oqsprovider_encoder[] = {
 #define ENCODER_PROVIDER "oqsprovider"
 #include "oqsencoders.inc"
@@ -989,6 +999,7 @@ static const OSSL_ALGORITHM oqsprovider_
 #undef ENCODER_PROVIDER
 };
 
+static OSSL_ALGORITHM *oqsprovider_decoder_rt = NULL;
 static const OSSL_ALGORITHM oqsprovider_decoder[] = {
 #define DECODER_PROVIDER "oqsprovider"
 #include "oqsdecoders.inc"
@@ -1063,21 +1074,48 @@ static int oqsprovider_get_params(void *
     return 1;
 }
 
+int cnt_rt_disabled(const OSSL_ALGORITHM orig[], int len) {
+    int dcnt = 0;
+
+    for (int i = 0; i < len - 1; i++)
+        if (sk_OPENSSL_STRING_find(rt_disabled_algs,
+                                   (char *)orig[i].algorithm_names) >= 0)
+            dcnt++;
+    return dcnt;
+}
+
+#define FILTERED_ALGS(algs)                                                    \
+    d_algs = cnt_rt_disabled(algs, OSSL_NELEM(algs));                          \
+    if (algs##_rt == NULL) {                                                   \
+        algs##_rt = OPENSSL_malloc(sizeof(OSSL_ALGORITHM) * OSSL_NELEM(algs) - \
+                                   d_algs);                                    \
+        n_cnt = 0;                                                             \
+        for (int i = 0; i < OSSL_NELEM(algs); i++) {                           \
+            if (sk_OPENSSL_STRING_find(rt_disabled_algs,                       \
+                                       (char *)algs[i].algorithm_names) < 0) { \
+                *(algs##_rt + n_cnt) = algs[i];                                \
+                n_cnt++;                                                       \
+            }                                                                  \
+        }                                                                      \
+    }                                                                          \
+    return algs##_rt
+
 static const OSSL_ALGORITHM *oqsprovider_query(void *provctx, int operation_id,
                                                int *no_cache) {
-    *no_cache = 0;
+    int d_algs, n_cnt;
+    *no_cache = 1;
 
     switch (operation_id) {
     case OSSL_OP_SIGNATURE:
-        return oqsprovider_signatures;
+        FILTERED_ALGS(oqsprovider_signatures);
     case OSSL_OP_KEM:
-        return oqsprovider_asym_kems;
+        FILTERED_ALGS(oqsprovider_asym_kems);
     case OSSL_OP_KEYMGMT:
-        return oqsprovider_keymgmt;
+        FILTERED_ALGS(oqsprovider_keymgmt);
     case OSSL_OP_ENCODER:
-        return oqsprovider_encoder;
+        FILTERED_ALGS(oqsprovider_encoder);
     case OSSL_OP_DECODER:
-        return oqsprovider_decoder;
+        FILTERED_ALGS(oqsprovider_decoder);
     default:
         if (getenv("OQSPROV"))
             printf("Unknown operation %d requested from OQS provider\n",
@@ -1088,6 +1126,18 @@ static const OSSL_ALGORITHM *oqsprovider
 
 static void oqsprovider_teardown(void *provctx) {
     oqsx_freeprovctx((PROV_OQS_CTX *)provctx);
+    OPENSSL_free(oqsprovider_signatures_rt);
+    oqsprovider_signatures_rt = NULL;
+    OPENSSL_free(oqsprovider_asym_kems_rt);
+    oqsprovider_asym_kems_rt = NULL;
+    OPENSSL_free(oqsprovider_keymgmt_rt);
+    oqsprovider_keymgmt_rt = NULL;
+    OPENSSL_free(oqsprovider_encoder_rt);
+    oqsprovider_encoder_rt = NULL;
+    OPENSSL_free(oqsprovider_decoder_rt);
+    oqsprovider_decoder_rt = NULL;
+    sk_OPENSSL_STRING_free(rt_disabled_algs);
+    rt_disabled_algs = NULL;
     OQS_destroy();
 }
 
@@ -1108,6 +1158,10 @@ static const OSSL_DISPATCH oqsprovider_d
 #define OQS_PROVIDER_ENTRYPOINT_NAME OSSL_provider_init
 #endif // ifdef OQS_PROVIDER_STATIC
 
+static int algname_strcmp(const char *const *a, const char *const *b) {
+    return strcmp(*a, *b);
+}
+
 int OQS_PROVIDER_ENTRYPOINT_NAME(const OSSL_CORE_HANDLE *handle,
                                  const OSSL_DISPATCH *in,
                                  const OSSL_DISPATCH **out, void **provctx) {
@@ -1123,6 +1177,8 @@ int OQS_PROVIDER_ENTRYPOINT_NAME(const O
     OSSL_PARAM version_request[] = {{"openssl-version", OSSL_PARAM_UTF8_PTR,
                                      &opensslv, sizeof(&opensslv), 0},
                                     {NULL, 0, NULL, 0, 0}};
+    if (!rt_disabled_algs)
+        rt_disabled_algs = sk_OPENSSL_STRING_new(algname_strcmp);
 
     OQS_init();
 
@@ -1167,6 +1223,8 @@ int OQS_PROVIDER_ENTRYPOINT_NAME(const O
 
     // insert all OIDs to the global objects list
     for (i = 0; i < OQS_OID_CNT; i += 2) {
+        int id_ok = 1;
+
         if (oqs_oid_alg_list[i] == NULL) {
             OQS_PROV_PRINTF2("OQS PROV: Warning: No OID registered for %s\n",
                              oqs_oid_alg_list[i + 1]);
@@ -1174,10 +1232,10 @@ int OQS_PROVIDER_ENTRYPOINT_NAME(const O
             if (!c_obj_create(handle, oqs_oid_alg_list[i],
                               oqs_oid_alg_list[i + 1],
                               oqs_oid_alg_list[i + 1])) {
-                ERR_raise(ERR_LIB_USER, OQSPROV_R_OBJ_CREATE_ERR);
-                fprintf(stderr, "error registering NID for %s\n",
+                OQS_PROV_PRINTF2("error registering NID for %s\n",
                         oqs_oid_alg_list[i + 1]);
-                goto end_init;
+                id_ok = 0;
+                goto end_for;
             }
 
             /* create object (NID) again to avoid setup corner case problems
@@ -1200,10 +1258,10 @@ int OQS_PROVIDER_ENTRYPOINT_NAME(const O
 
             if (!c_obj_add_sigid(handle, oqs_oid_alg_list[i + 1], "",
                                  oqs_oid_alg_list[i + 1])) {
-                fprintf(stderr, "error registering %s with no hash\n",
+                OQS_PROV_PRINTF2("error registering %s with no hash\n",
                         oqs_oid_alg_list[i + 1]);
-                ERR_raise(ERR_LIB_USER, OQSPROV_R_OBJ_CREATE_ERR);
-                goto end_init;
+                id_ok = 0;
+                goto end_for;
             }
 
             if (OBJ_sn2nid(oqs_oid_alg_list[i + 1]) != 0) {
@@ -1219,9 +1277,50 @@ int OQS_PROVIDER_ENTRYPOINT_NAME(const O
                 ERR_raise(ERR_LIB_USER, OQSPROV_R_OBJ_CREATE_ERR);
                 goto end_init;
             }
+        end_for:
+            if (!id_ok) {
+                sk_OPENSSL_STRING_push(rt_disabled_algs,
+                                       (char *)(oqs_oid_alg_list[i + 1]));
+            }
         }
     }
 
+    // ML-KEM implementation in OpenSSL 3.5 is _much_ more developed than this
+    // code
+    if (strcmp("3.5.0", ossl_versionp) <= 0) {
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mlkem512");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mlkem768");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "X25519MLKEM768");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "SecP256r1MLKEM768");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "SecP384r1MLKEM1024");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mlkem1024");
+        // need to disable these as per
+        // https://github.com/open-quantum-safe/oqs-provider/discussions/610#discussioncomment-12246359
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa44_pss2048");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa44_rsa2048");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa44_ed25519");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa44_p256");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa44_bp256");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa65_pss3072");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa65_rsa3072");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa65_p256");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa65_bp256");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa65_ed25519");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa87_p384");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa87_bp384");
+        sk_OPENSSL_STRING_push(rt_disabled_algs, "mldsa87_ed448");
+    }
+
+    // output disabled algs:
+    /*
+    printf("disabled algs: %p (cnt: %d)\n", rt_disabled_algs,
+    sk_OPENSSL_STRING_num(rt_disabled_algs));
+    for (int i = 0; i < sk_OPENSSL_STRING_num(rt_disabled_algs); ++i) {
+      printf("Disabled alg #%d: %s in OpenSSL version %s\n", i,
+    sk_OPENSSL_STRING_value(rt_disabled_algs, i), ossl_versionp);
+    }
+    */
+
     // if libctx not yet existing, create a new one
     if (((corebiometh = oqs_bio_prov_init_bio_method()) == NULL) ||
         ((libctx = OSSL_LIB_CTX_new_child(handle, orig_in)) == NULL) ||
diff -wpruN --no-dereference '--exclude=*.orig' a~/oqsprov/oqsprov_capabilities.c a/oqsprov/oqsprov_capabilities.c
--- a~/oqsprov/oqsprov_capabilities.c	1970-01-01 00:00:00
+++ a/oqsprov/oqsprov_capabilities.c	1970-01-01 00:00:00
@@ -615,9 +615,14 @@ static int oqs_group_capability(OSSL_CAL
     size_t i;
 
     for (i = 0; i < OSSL_NELEM(oqs_param_group_list); i++) {
+        // do not register algorithms disabled at runtime
+        if (sk_OPENSSL_STRING_find(oqsprov_get_rt_disabled_algs(),
+                                   (char *)oqs_param_group_list[i][2].data) <
+            0) {
         if (!cb(oqs_param_group_list[i], arg))
             return 0;
     }
+    }
 
     return 1;
 }
@@ -796,9 +801,14 @@ static int oqs_sigalg_capability(OSSL_CA
     // liboqs:
     assert(OSSL_NELEM(oqs_param_sigalg_list) <= OSSL_NELEM(oqs_sigalg_list));
     for (i = 0; i < OSSL_NELEM(oqs_param_sigalg_list); i++) {
+        // do not register algorithms disabled at runtime
+        if (sk_OPENSSL_STRING_find(oqsprov_get_rt_disabled_algs(),
+                                   (char *)oqs_param_sigalg_list[i][1].data) <
+            0) {
         if (!cb(oqs_param_sigalg_list[i], arg))
             return 0;
     }
+    }
 
     return 1;
 }
diff -wpruN --no-dereference '--exclude=*.orig' a~/scripts/runtests.sh a/scripts/runtests.sh
--- a~/scripts/runtests.sh	1970-01-01 00:00:00
+++ a/scripts/runtests.sh	1970-01-01 00:00:00
@@ -153,6 +153,10 @@ if ! "${OPENSSL_APP}" list -providers -v
    exit 1
 fi
 
+"${OPENSSL_APP}" list -signature-algorithms
+"${OPENSSL_APP}" list -kem-algorithms
+
+
 # Run interop-tests:
 # cleanup log from previous runs:
 rm -f interop.log
