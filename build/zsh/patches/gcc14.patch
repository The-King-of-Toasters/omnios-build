These patches enable building with gcc14. In particular, without patching
configure.ac to explicitly define the return type of main(), many tests fail
to compile and incorrect determinations are made. These should be contributed
upstream.

diff -wpruN --no-dereference '--exclude=*.orig' a~/Src/Modules/termcap.c a/Src/Modules/termcap.c
--- a~/Src/Modules/termcap.c	1970-01-01 00:00:00
+++ a/Src/Modules/termcap.c	1970-01-01 00:00:00
@@ -42,7 +42,7 @@
 #ifdef HAVE_TGETENT
 
 #ifndef HAVE_BOOLCODES
-static char *boolcodes[] = {
+const char * const boolcodes[] = {
     "bw", "am", "ut", "cc", "xs", "YA", "YF", "YB", "xt", "xn", "eo",
     "gn", "hc", "HC", "km", "YC", "hs", "hl", "in", "YG", "da", "db",
     "mi", "ms", "nx", "xb", "NP", "ND", "NR", "os", "5i", "YD", "YE",
diff -wpruN --no-dereference '--exclude=*.orig' a~/Src/Modules/zftp.c a/Src/Modules/zftp.c
--- a~/Src/Modules/zftp.c	1970-01-01 00:00:00
+++ a/Src/Modules/zftp.c	1970-01-01 00:00:00
@@ -52,6 +52,7 @@ typedef struct zftp_session *Zftp_sessio
 #include "tcp.h"
 #include "zftp.mdh"
 #include "zftp.pro"
+#include "tcp.epro"
 
 /* it's a TELNET based protocol, but don't think I like doing this */
 #include <arpa/telnet.h>
diff -wpruN --no-dereference '--exclude=*.orig' a~/Src/Modules/zutil.c a/Src/Modules/zutil.c
--- a~/Src/Modules/zutil.c	1970-01-01 00:00:00
+++ a/Src/Modules/zutil.c	1970-01-01 00:00:00
@@ -29,6 +29,7 @@
 
 #include "zutil.mdh"
 #include "zutil.pro"
+extern mod_import_function void set_list_array _((char*name,LinkList l));
 
 typedef struct {
     char **match;
diff -wpruN --no-dereference '--exclude=*.orig' a~/aczsh.m4 a/aczsh.m4
--- a~/aczsh.m4	1970-01-01 00:00:00
+++ a/aczsh.m4	1970-01-01 00:00:00
@@ -44,7 +44,8 @@ AC_DEFUN(zsh_64_BIT_TYPE,
 #include <sys/types.h>
 #endif
 
-main()
+int
+main(void)
 {
   $1 foo = 0; 
   int bar = (int) foo;
@@ -146,7 +147,8 @@ char *zsh_gl_sym_addr ;
 #define RTLD_GLOBAL 0
 #endif
 
-main()
+int
+main(void)
 {
     void *handle1, *handle2;
     void *(*zsh_getaddr1)(), *(*zsh_getaddr2)();
@@ -229,7 +231,8 @@ char *zsh_gl_sym_addr ;
 #endif
 
 
-main()
+int
+main(void)
 {
     void *handle1, *handle2;
     int (*fred1)(), (*fred2)();
@@ -304,7 +307,8 @@ char *zsh_gl_sym_addr ;
 #define RTLD_GLOBAL 0
 #endif
 
-main()
+int
+main(void)
 {
     void *handle;
     int (*barneysym)();
@@ -374,7 +378,8 @@ char *zsh_gl_sym_addr ;
 #define RTLD_GLOBAL 0
 #endif
 
-main()
+int
+main(void)
 {
     void *handle;
     int (*barneysym)();
@@ -448,7 +453,8 @@ char *zsh_gl_sym_addr ;
 #define RTLD_GLOBAL 0
 #endif
 
-main()
+int
+main(void)
 {
     void *handle;
     int (*barneysym)();
@@ -516,7 +522,8 @@ char *zsh_gl_sym_addr ;
 #define RTLD_GLOBAL 0
 #endif
 
-main()
+int
+main(void)
 {
     void *handle;
     int (*fredsym)();
diff -wpruN --no-dereference '--exclude=*.orig' a~/configure.ac a/configure.ac
--- a~/configure.ac	1970-01-01 00:00:00
+++ a/configure.ac	1970-01-01 00:00:00
@@ -585,7 +585,7 @@ fi
 dnl  Checking if compiler correctly cast signed to unsigned.
 AC_CACHE_CHECK(if signed to unsigned casting is broken,
 zsh_cv_c_broken_signed_to_unsigned_casting,
-[AC_RUN_IFELSE([AC_LANG_SOURCE([[main(){return((int)(unsigned char)((char) -1) == 255);}]])],[zsh_cv_c_broken_signed_to_unsigned_casting=yes],[zsh_cv_c_broken_signed_to_unsigned_casting=no],[zsh_cv_c_broken_signed_to_unsigned_casting=no])])
+[AC_RUN_IFELSE([AC_LANG_SOURCE([[int main(void){return((int)(unsigned char)((char) -1) == 255);}]])],[zsh_cv_c_broken_signed_to_unsigned_casting=yes],[zsh_cv_c_broken_signed_to_unsigned_casting=no],[zsh_cv_c_broken_signed_to_unsigned_casting=no])])
 AH_TEMPLATE([BROKEN_SIGNED_TO_UNSIGNED_CASTING],
 [Define to 1 if compiler incorrectly cast signed to unsigned.])
 if test x$zsh_cv_c_broken_signed_to_unsigned_casting = xyes; then
@@ -1018,7 +1018,7 @@ dnl ------------------------------------
 dnl AC_CHECK_SIZEOF is no good, because we need the result here,
 dnl and that doesn't seem to define a shell parameter.
 AC_CACHE_CHECK(if long is 64 bits, zsh_cv_long_is_64_bit,
-[AC_RUN_IFELSE([AC_LANG_SOURCE([[int main() { return sizeof(long) < 8; }]])],[zsh_cv_long_is_64_bit=yes],[zsh_cv_long_is_64_bit=no],[zsh_cv_long_is_64_bit=no])])
+[AC_RUN_IFELSE([AC_LANG_SOURCE([[int main(void) { return sizeof(long) < 8; }]])],[zsh_cv_long_is_64_bit=yes],[zsh_cv_long_is_64_bit=no],[zsh_cv_long_is_64_bit=no])])
 
 AH_TEMPLATE([ino_t],
 [Define to `unsigned long' if <sys/types.h> doesn't define.])
@@ -1046,7 +1046,7 @@ else
   [AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 
-main() { return sizeof(off_t) < 8; }
+int main(void) { return sizeof(off_t) < 8; }
 ]])],[zsh_cv_off_t_is_64_bit=yes],[zsh_cv_off_t_is_64_bit=no],[zsh_cv_off_t_is_64_bit=no])])
   if test x$zsh_cv_off_t_is_64_bit = xyes; then
     AC_DEFINE(OFF_T_IS_64_BIT)
@@ -1056,7 +1056,7 @@ main() { return sizeof(off_t) < 8; }
   [AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 
-main() { return sizeof(ino_t) < 8; }
+int main(void) { return sizeof(ino_t) < 8; }
 ]])],[zsh_cv_ino_t_is_64_bit=yes],[zsh_cv_ino_t_is_64_bit=no],[zsh_cv_ino_t_is_64_bit=no])])
   if test x$zsh_cv_ino_t_is_64_bit = xyes; then
     AC_DEFINE(INO_T_IS_64_BIT)
@@ -1396,7 +1396,7 @@ zsh_cv_func_tgetent_accepts_null,
 #include <stdlib.h>
 int tgetent(char *, char *);
 char *tgetstr(char *, char **);
-main()
+int main(void)
 {
     char buf[4096];
     int r1 = tgetent(buf, "vt100");
@@ -1424,7 +1424,7 @@ zsh_cv_func_tgetent_zero_success,
 #include <stdlib.h>
 int tgetent(char *, char*);
 char *tgetstr(char *, char **);
-main()
+int main(void)
 {
     char buf[4096];
     int r1 = tgetent(buf, "!@#$%^&*");
@@ -1862,7 +1862,7 @@ zsh_cv_rlim_t_is_longer,
 #endif
 #include <sys/resource.h>
 #include <stdlib.h>
-main(){struct rlimit r;exit(sizeof(r.rlim_cur) <= sizeof(long));}]])],[zsh_cv_rlim_t_is_longer=yes],[zsh_cv_rlim_t_is_longer=no],[zsh_cv_rlim_t_is_longer=yes])])
+int main(void){struct rlimit r;exit(sizeof(r.rlim_cur) <= sizeof(long));}]])],[zsh_cv_rlim_t_is_longer=yes],[zsh_cv_rlim_t_is_longer=no],[zsh_cv_rlim_t_is_longer=yes])])
 if test x$zsh_cv_rlim_t_is_longer = xyes; then
   AC_CACHE_CHECK(if rlim_t is a quad,
   zsh_cv_rlim_t_is_quad_t,
@@ -1873,7 +1873,7 @@ if test x$zsh_cv_rlim_t_is_longer = xyes
 #include <stdio.h>
 #include <sys/resource.h>
 #include <stdlib.h>
-main() { 
+int main(void) { 
   struct rlimit r;
   char buf[20];
   r.rlim_cur = 0;
@@ -1896,7 +1896,7 @@ else
 #endif
 #include <sys/resource.h>
 #include <stdlib.h>
-  main(){struct rlimit r;r.rlim_cur=-1;exit(r.rlim_cur<0);}]])],[zsh_cv_type_rlim_t_is_unsigned=yes],[zsh_cv_type_rlim_t_is_unsigned=no],[zsh_cv_type_rlim_t_is_unsigned=no])])
+  int main(void){struct rlimit r;r.rlim_cur=-1;exit(r.rlim_cur<0);}]])],[zsh_cv_type_rlim_t_is_unsigned=yes],[zsh_cv_type_rlim_t_is_unsigned=no],[zsh_cv_type_rlim_t_is_unsigned=no])])
   if test x$zsh_cv_type_rlim_t_is_unsigned = xyes; then
     AC_DEFINE(RLIM_T_IS_UNSIGNED)
     DEFAULT_RLIM_T="unsigned $DEFAULT_RLIM_T"
@@ -2043,7 +2043,7 @@ if test x$ac_cv_func_getcwd = xyes; then
   [AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <unistd.h>
 #include <string.h>
-int main() {
+int main(void) {
     char buf[1024], *ptr1, *ptr2;
     ptr1 = getcwd(buf, 1024);
     ptr2 = getcwd(NULL, 0);
@@ -2177,7 +2177,7 @@ zsh_cv_sys_fifo,
 #include <unistd.h>
 #include <stdlib.h>
 #include <sys/stat.h>
-main()
+int main(void)
 {
     char c;
     int fd;
@@ -2221,7 +2221,7 @@ zsh_cv_sys_lseek,
 #include <unistd.h>
 #include <sys/socket.h>
 #include <sys/stat.h>
-int main() {
+int main(void) {
     int pipefd[2], fd;
     off_t ret;
     char* tmpfile = "seekfiletest.tmp";
@@ -2278,7 +2278,7 @@ zsh_cv_sys_link,
 #include <unistd.h>
 #include <fcntl.h>
 #include <stdlib.h>
-main()
+int main(void)
 {
     int ret;
     char *tmpfile, *newfile;
@@ -2311,7 +2311,7 @@ zsh_cv_sys_killesrch,
 #include <signal.h>
 #include <errno.h>
 #include <stdlib.h>
-main()
+int main(void)
 {
     int pid = (getpid() + 10000) & 0xffffff;
     while (pid && (kill(pid, 0) == 0 || errno != ESRCH)) pid >>= 1;
@@ -2341,7 +2341,7 @@ int child=0;
 void handler(sig)
     int sig;
 {if(sig==SIGCHLD) child=1;}
-main() {
+int main(void) {
     struct sigaction act;
     sigset_t set;
     int pid, ret;
@@ -2389,7 +2389,7 @@ case "x$zsh_working_tcsetpgrp" in
 #include <unistd.h>
 #include <fcntl.h>
 #include <stdlib.h>
-main() {
+int main(void) {
     int fd;
     int ret;
     fd=open("/dev/tty", O_RDWR);
@@ -2436,7 +2436,7 @@ if test x$ac_cv_func_getpwnam = xyes; th
 #include <string.h>
 #include <stdlib.h>
 #include <unistd.h>
-main() {
+int main(void) {
     struct passwd *pw1, *pw2;
     char buf[1024], name[1024];
     sprintf(buf, "%d:%d", getpid(), rand());
@@ -2584,7 +2584,7 @@ if test x$zsh_cv_c_unicode_support = xye
   #include <wchar.h>
   #include <wctype.h>
 
-  int main() {
+  int main(void) {
     char **localep;
     char comb_acute_mb[] = { (char)0xcc, (char)0x81 };
     char u_0234[] = { (char)0xc8, (char)0xb4 };
@@ -2626,7 +2626,7 @@ if test x$zsh_cv_c_unicode_support = xye
   #include <locale.h>
   #include <ctype.h>
 
-  int main() {
+  int main(void) {
     char **localep;
     for (localep = my_locales; *localep; localep++)
       if (setlocale(LC_ALL, *localep) && isprint(0xa0))
@@ -2765,9 +2765,7 @@ elif test "x$dynamic" = xyes; then
 #include <fcntl.h>
 #include <stdlib.h>
 #include <unistd.h>
-main(argc, argv)
-int argc;
-char *argv[];
+int main(int argc, char **argv)
 {
 	char b[4];
 	int i = open(argv[0],O_RDONLY);
@@ -2912,7 +2910,7 @@ LDFLAGS="$old_LDFLAGS")
   AC_CACHE_CHECK(if your dlsym() needs a leading underscore,
    zsh_cv_func_dlsym_needs_underscore,
    [echo failed >conftestval && cat >conftest.c <<EOM
-fred () { }
+int fred () { }
 EOM
     AC_TRY_COMMAND($CC -c $CFLAGS $CPPFLAGS $DLCFLAGS conftest.c 1>&AS_MESSAGE_LOG_FD) &&
     AC_TRY_COMMAND($DLLD $LDFLAGS $DLLDFLAGS -o conftest.$DL_EXT conftest.o 1>&AS_MESSAGE_LOG_FD) &&
@@ -2945,7 +2943,8 @@ char *zsh_gl_sym_addr ;
 
 extern int fred() ;
 
-main()
+int
+main(void)
 {
     void * handle ;
     void * symbol ;
